import sys
import random as rand
import argparse
import controller

class P(process, controller.Controllee):
    def setup(ctl, s:set, nrequests:int):  # s is set of all other processes
        super().setup(ctl)
        self.q = set()
        self.cs = False
            # to see if the process is already in CS. This will stop it from going into CS
            # again while one req is already being processed.
        self.proc_waiting = 0 
            # inc if the process has placed a req for resource and waiting to go into CS


    def requestResource():
        -- request
        # output("Entering Request resource for process:", self)
        if nrequests > 0:
            # output("Requesting resource for process:", self)
            nrequests -= 1
            c = logical_clock()
            send(('request', c, self), to= s)
            q.add(('request', c, self))
            proc_waiting += 1
            send(("PROC_Request_CS", c, self), to=ctl)
            # await(each(('request', c2, p) in q,
            #         has= (c2, p)==(c, self) or (c, self) < (c2, p)) and
            #     each(p in s, has= some(received(('ack', c2, _p)), has= c2 > c)))

    def criticalSection(task):
        -- critical_section
        if proc_waiting > 0 and not cs:
            await(some(('request', c, self) in q, has=each(('request', c2, p) in q, has= (c, self) == (c2, p) or (c, self) < (c2, p))) and each(p in s, has=some(received(('ack', c3, _p)), has= c3 > c)))
            # output("Entering critical section for process: ", self)
            cs = True
            send(("PROC_Enter_CS", logical_clock(), self), to=ctl)
            task()
            
    def releaseResource():
        -- release
        if cs:
            # output("Release resource for process", self)
            cs = False
            for r in setof(('request', c, self), ('request', c, self) in q):
                q.remove(r)
                break
            proc_waiting -= 1
            send(("PROC_Exit_CS", logical_clock(), self), to=ctl)
            send(('release', logical_clock(), self), to= s)


    def receive(msg= ('request', c2, p)):
        q.add(('request', c2, p))
        send(('ack', logical_clock(), self), to= p)

    def receive(msg= ('release', _, p)):
#        q.remove(('request', _, p))  # pattern matching needed for _
#        q.remove(anyof(setof(('request', c, p), ('request', c, _p) in q)))
        for x in setof(('request', c, p), ('request', c, _p) in q):
            q.remove(x)
            break
#        for ('request', c, _p) in q: q.remove('request', c, p); break
#        for (tag, c, p2) in q:
#            if tag == 'request' and p2 == p:
#                q.remove((tag, c, p2)); break

    @controller.run
    def run():
        def task():
            output('in cs')
        # asyncFunctions = [
        #         (requestResource, []), 
        #         (criticalSection, [task]),
        #         (releaseResource, [])
        #     ]
        # while nrequests > 0 or setof(('request', c, self), ('request', c, self) in q):
        #     func = asyncFunctions[rand.randint(0,2)]
        #     # output(nreq   uests, setof(('request', c, self), ('request', c, self) in q))
        #     func[0](*func[1])
        s = set([('accepted', 7, 'a', 1), ('rejected', 8, 'b', 2), ('accepted', 7, 'a', 3), ('rejected', 7, 'd'), ('rejected', 7, 4)])
        p = 'a'
        output(setof(ele[0], ele in s, len(ele) == 4, ele[1] == 7, ele[2] == p))
        # send(('done', self), to= parent())
        # await(received(('done',), from_=parent()))
        # output('terminating')

def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrequests = int(sys.argv[2]) if len(sys.argv) > 2 else 1

    config(channel is fifo, clock is lamport)

    ctl = new(controller.Controller, num= 1)
    setup(ctl, (nprocs,))
    start(ctl)

    ps = new(P, num=nprocs)
    for p in ps: setup(p, (ctl, ps-{p}, nrequests))
    start(ps)

    # await(each(p in ps, has=received(('done', p))))
    # send(('done',), to=ps)

# This is an executable specification of the algorithm described in
# Lamport, L. (1978). "Time, clocks, and the ordering of events in a
# distributed system".  Communications of the ACM, 21(7):558-565.

# This code includes setup and termination for serving a given number of
# requests per process.

# All labels are not needed,
# leaving 14 or 15 lines total for the algorithm body and message handlers.
