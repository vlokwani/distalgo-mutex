import sys
import controller

class P(process, controller.Controllee):
    def setup(ctl, s:set, nrequests:int):  # s is set of all other processes
        super().setup(ctl)

    def mutex(task):
        -- request
        c = logical_clock()
        send(('request', c, self.id), to= s)
        send(("PROC_Request_CS", c, self), to=ctl)
        await(each(received(('request', c2, p)),
                   has= received(('release', c2, p)) or (c, self.id) < (c2, p))
              and each(p in s, has= received(('ack', c, p))))
        -- critical_section
        send(("PROC_Enter_CS", logical_clock(), self), to=ctl)
        task()
        -- release
        send(("PROC_Exit_CS", logical_clock(), self), to=ctl)
        send(('release', c, self.id), to= s)

    def receive(msg= ('request', c, p)):
        send(('ack', c, self.id), to= p)

    @controller.run
    def run():
        def task(): output('in cs')
        for i in range(nrequests):
            mutex(task)

def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrequests = int(sys.argv[2]) if len(sys.argv) > 2 else 1

    config(channel= 'fifo', clock= 'Lamport')

    ctl = new(controller.Controller, num= 1)
    setup(ctl, (nprocs,))
    start(ctl)

    ps = new(P, num= nprocs)
    for p in ps: setup(p, (ctl, ps-{p}, nrequests))
    start(ps)

# This is an executable specification that simplifies the algorithm in
# Lamport, L. (1978). "Time, clocks, and the ordering of events in a
# distributed system".  Communications of the ACM, 21(7):558-565.

# The simplification is to remove an unnecessary q and message handler;
# release and ack messages include the request time,
# not timestamps unused or used for unnecessary expensive comparison.

# This code includes setup and termination for serving a given number of
# requests per process.

# All labels are not needed,
# leaving a total of 9 lines for the algorithm body and message handler.
