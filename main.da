import argparse
import controller
import subprocess
import re
import json
#import orig
#import spec


def parse_performance_output(s):
    """Parse a string of standard output text for the "OUTPUT: <JSON>"
    line and return the parsed JSON object.
    """
    m = re.search(r'^###OUTPUT: (.*)', s, re.MULTILINE)
    if m is None:
        return None
    return json.loads(m.group(1))

def parse_correctness_output(s):
    """Parse a string of standard output text for the "CORRECTNESS_OUTPUT: <JSON>"
    line and return the parsed JSON object.
    """
    m = re.search(r'^###CORRECTNESS_OUTPUT: (.*)', s, re.MULTILINE)
    if m is None:
        return None
    return json.loads(m.group(1))

def launch(run_args, timeout=60):
    """Launch the specified run profile in a subprocess that
    captures/parses standard output and error. Return a JSON object
    obtained by parsing stdout for a line "OUTPUT: <JSON>", where
    <JSON> is JSON-encoded data.
    """
    child = subprocess.Popen(
        run_args, bufsize=-1,
        # To debug, comment out this line to make stdout/stderr
        # the same standard out and error streams as the parent.
        # Alternatively (if the process terminates), uncomment
        # the print statements below.
        # In the future, maybe use something like
        #   http://stackoverflow.com/questions/375427/non-blocking-read-on-a-subprocess-pipe-in-python
        stdout=subprocess.PIPE, stderr=subprocess.PIPE,
        #cwd=dirname,
        #env=env,
        universal_newlines=True)
    
    stdout, stderr = child.communicate(timeout=timeout)
#   print(stdout)
    # if child.returncode != 0:
        # raise subprocess.CalledProcessError(child.returncode, run_args, stderr)

    performance_results = parse_performance_output(stdout)
    correctness_results = parse_correctness_output(stdout)
    return performance_results, correctness_results

# Functions: parse_performance_output, parse_correctness_output & launch were taken form 
# the file run.py from: https://github.com/DistAlgo/distalgo/blob/1.1.0b12/benchmarks/run.py.
# These have also been modified a little to suit the needs of main.da.

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('nprocs', nargs='?', default=10, type=int)
    parser.add_argument('nrequests', nargs='?', default=1, type=int)
    parser.add_argument('nparams', nargs='?', default=1, type=int)
    parser.add_argument('nreps', nargs='?', default=1, type=int)
    args = parser.parse_args()

    nprocs, nrequests, nparams, nreps = args.nprocs, args.nrequests, args.nparams, args.nreps

    # ctl = new(controller.Controller, num= 1)
    # setup(ctl, (nprocs,))
    # start(ctl)

    mutex_implementations = ['my_impl.da', 'orig.da', 'spec.da']

    for mutex_impl in mutex_implementations:
        print("**** Running performance testing for mutex implementation: {} ****\n\n".format(mutex_impl))
        for rep in range(nreps): 
            for requests in range(nrequests//nparams, nrequests+1, nrequests//nparams):
                
                print("*** Results for {} processes and {} requests ***\n\n".format(nprocs, requests))
                try:
                    results = launch(['python3', '-m', 'da', mutex_impl, str(nprocs), str(requests)])
                except TimeoutError:
                    print("There was a deadlock because of which the process timedout. Number of requests: {} and processes: {}".format(requests, nprocs))
                    print("performance metrics and correctness metrics could not be collected")
                    continue
                print("Performance Metric: \n")
                print(json.dumps(results[0]['All'], indent=4, sort_keys=True))
                
                print("\n\n Correctness Metrics: \n")
                print("Safety: {}\n".format(results[1]["safety"]))
                print("Liveness: True\n") # Since there were no deadlocks in the system
                fairness = True 
                for proc in results[1]['CS_req_made']: 
                    if results[1]['CS_req_made'][proc] != results[1]['CS_req_met'][proc]:
                        fairness = False
                        break
                print("Fairness: {}".format(fairness))
                
            for procs in range(nprocs//nparams, nprocs+1, nprocs//nparams):
                print("*** Results for {} processes and {} requests ***\n\n".format(procs, nrequests))
                try:
                    results = launch(['python3', '-m', 'da', mutex_impl, str(procs), str(nrequests)])
                except TimeoutError:
                    print("There was a deadlock because of which the process timedout. Number of requests: {} and processes: {}".format(nrequests, procs))
                    print("performance metrics and correctness metrics could not be collected")
                
                print("Performance Metric: \n")
                print(json.dumps(results[0]['All'], indent=4, sort_keys=True))
                
                print("\n\n Correctness Metrics: \n")
                print("Safety: {}\n".format(results[1]["safety"]))
                print("Liveness: True\n") # Since there were no deadlocks in the system
                fairness = True 
                for proc in results[1]['CS_req_made']: 
                    if results[1]['CS_req_made'][proc] != results[1]['CS_req_met'][proc]:
                        fairness = False
                        break
                print("Fairness: {}".format(fairness))